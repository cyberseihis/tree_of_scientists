@document.meta
title: treescience
description: Multidimentional data structures class project
authors: dabbing
categories: ceid, software
created: 2022-12-28
updated: 2023-01-02
version: 0.0.15
@end

* Tree of scientists
  [Project description]{/ ProjectDefinitionNddata.pdf}
  Deadline: around finals period
  I chose project 1
** Problem definition
   Create multi-dimentional index structures for data of the form
   (surname: String, awards: Int, education: /text-vector/)
   scraped from [List of scientists]
   to be used for range queries on the first two fields
   and /LSH/ grouping on the last.
*** Structures
    - k-d trees
    - Quad trees
    - Range trees
    - R trees
*** Example
    Scientists with >60% simularity in education with names starting
    with \[A..G\] and have > 4 awards.

** Plan
   - [x] Scap data with python
   - [x] Cleanup data
   - [x] Write _summary_ for the types of data structures
   - [x] Dump data in csv
   - [x] Look for haskell data structure libraries
     I will just write them from scratch, libraries are more general than I would like
   - [ ] Turn names to ints for ease
   - [-] Implement data structures
   - [ ] Turn education to /LSH/ hashes
   - [ ] Measure complexity for each structure
   Complexity here means ammount of operations/nodes accessed
   - [ ] Write report

** Data scraping
   [List of scientists]{https://en.wikipedia.org/wiki/List_of_computer_scientists}
   - [x] Search for wikipedia scraping
   Wikipedia-specific libraries don't have all the features needed
   - [x] Get list of links for wiki pages
   - [x] Search for web scraping in python
   Propably will use beatiful soup
   -Will download the html of the first page to get going-
   Just got all the links using developer tools in the browser
   - [x] Scrap surname
   - [x] Scrap ammount of awards
   - [x] Write scrap script for education
   - [x] Scrap education texts
   By education I understand the 'Education' section specifically.
   Do education seperately since it will be vectorised anyways
** Data cleanup
   - [x] Merge name/award files
   - [x] Merge with education file
   - [x] Remove partial results
   - [x] Formating
   - [x] Remove citations
   - [x] Turn to csv
   But text may contain commas though
** Structure summaries
*** K-d tree
    Compare value with node, alternating dimension each level.
    Split at *median* since all values are available from start.
    Store values at nodes for easier ranger search.
    Range query:
    @code
    if in_range then print
    if low<=data search left
    if high>=data search right
    @end
*** Quad tree
    Split to quadrands each node. If a quadrand has over 4 points split again.
    Nodes hold the values for simplicity.
    Pick the node that minimizes spread between number of items in the quadrands.
    Range query same as kd tree, few more cases.
*** Range tree
    A 1d balanced binary tree +does balanced just mean split at median+,
    where each node holds another btree for the other dimension.
    Range query: like kd tree(for same dimension each time).
    "Reporting" in the first dimension means doing the query in the second of that node.
*** R tree
    Stores *Minimum Bounding Boxes* with given fanout.
    To construct put all points in an MBR and recursively split.
    Splitting: Pick median in dimention with biggest spread
    Range query: If search range and node range intersect search node
** Structure implemenations
*** Kd Tree
    - [x] Write datatype
    - [x] Write constructor
      Using sets doesn't make sense since there are multiples in each dimension
    - [x] Write range query
